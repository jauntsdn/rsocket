/*
 * Copyright 2015-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'io.spring.dependency-management' apply false
    id 'com.google.protobuf' apply false
    id 'com.github.sherter.google-java-format' apply false
    id 'me.champeau.gradle.jmh' apply false
    id 'io.morethan.jmhreport' apply false
    id 'com.google.osdetector' apply false
    id 'com.gradle.build-scan'
}

description = 'RSocket: Stream Oriented Messaging Passing with Reactive Stream Semantics.'

apply from: 'gradle/dependency-management.gradle'
apply from: 'gradle/publishing.gradle'

allprojects {
    dependencyLocking {
        lockAllConfigurations()
    }
}

subprojects {
    apply plugin: 'com.github.sherter.google-java-format'

    repositories {
        mavenCentral()
    }

    plugins.withType(JavaPlugin) {
        compileJava {
            sourceCompatibility = 1.8
        }

        javadoc {
            options.with {
                links jdkJavaDoc()
                links 'https://projectreactor.io/docs/core/release/api/'
                links 'https://netty.io/4.1/api/'
            }
        }

        tasks.named("javadoc").configure {
            onlyIf { System.getenv('SKIP_RELEASE') != "true" }
        }

        test {
            useJUnitPlatform()
            systemProperty "io.netty.leakDetection.level", "ADVANCED"
        }
    }

    plugins.withType(JavaLibraryPlugin) {
        task sourcesJar(type: Jar) {
            classifier 'sources'
            from sourceSets.main.allJava
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier 'javadoc'
            from javadoc.destinationDir
        }
    }

    googleJavaFormat {
        toolVersion = '1.6'
    }

    ext {
        if (project.hasProperty('versionSuffix')) {
            project.version += project.getProperty('versionSuffix')
        }
    }
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

def jdkJavaDoc() {
    def version = JavaVersion.current()
    def majorVersion = version.majorVersion
    if (version.isJava11Compatible()) {
        return "https://docs.oracle.com/en/java/javase/$majorVersion/docs/api/"
    } else {
        return "https://docs.oracle.com/javase/$majorVersion/docs/api/"
    }
}